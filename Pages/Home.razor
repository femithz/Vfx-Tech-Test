@page "/home"
@inject HttpClient Http
@using System.Text.Json

<PageTitle>Home</PageTitle>
@* HTML Section start *@
<div class="card">
    <div class="card-header">
        <div>
            <p class="title">Forex Daily Prices</p>
            <p class="sub-title">Last refresh @lastRefreshDate</p>
        </div>
        <div>
            <div class="select-dropdown">
                <select @onchange="HandleFromSelectionChange">
                    <option value="" selected>From Option</option>
                    <option value="GBP">GBP</option>
                    <option value="EUR">EUR</option>
                    <option value="USD">USD</option>
                </select>
            </div>
        </div>
        <div>
            <div class="select-dropdown">
                <select @onchange="HandleToSelectionChange">
                    <option value="" selected>To Option</option>
                    <option value="GBP">GBP</option>
                    <option value="EUR">EUR</option>
                    <option value="USD">USD</option>
                </select>
            </div>
        </div>
        <div>
            <span class="cursor" @onclick="RefreshData">
                <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="30" height="30" viewBox="0 0 30 30">
                    <path
                        d="M 15 3 C 12.031398 3 9.3028202 4.0834384 7.2070312 5.875 A 1.0001 1.0001 0 1 0 8.5058594 7.3945312 C 10.25407 5.9000929 12.516602 5 15 5 C 20.19656 5 24.450989 8.9379267 24.951172 14 L 22 14 L 26 20 L 30 14 L 26.949219 14 C 26.437925 7.8516588 21.277839 3 15 3 z M 4 10 L 0 16 L 3.0507812 16 C 3.562075 22.148341 8.7221607 27 15 27 C 17.968602 27 20.69718 25.916562 22.792969 24.125 A 1.0001 1.0001 0 1 0 21.494141 22.605469 C 19.74593 24.099907 17.483398 25 15 25 C 9.80344 25 5.5490109 21.062074 5.0488281 16 L 8 16 L 4 10 z">
                    </path>
                </svg>
            </span>
        </div>
    </div>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th scope="col">Open</th>
                <th scope="col">High</th>
                <th scope="col">Low</th>
                <th scope="col">Close</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in forexData)
            {
                <tr class="">
                    <td class="">@item.Open</td>
                    <td class="">@item.High</td>
                    <td class="">@item.Low</td>
                    <td class="">@item.Close</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@* HTML Section ends *@

@code {
    @* Default value set for fromSymbol *@
    private string fromSymbol = "GBP";

    @* Default value set for toSymbol *@
    private string toSymbol = "USD";
    private DateTime lastRefreshDate;
    private List<ForexData> forexData = new List<ForexData>();

    @* My generated apikey from Alphavantage NB: This can be put in an environment variable for security sake. *@
    private string apiKey = "XKDFENATL7UYWLL8";

    protected override async Task OnInitializedAsync()
    {
        await FetchForexData();
    }

    private async Task FetchForexData()
    {
        var url =
        $"https://www.alphavantage.co/query?function=FX_DAILY&from_symbol={fromSymbol}&to_symbol={toSymbol}&apikey={apiKey}";
        var response = await Http.GetFromJsonAsync<ForexResponse>(url);
        if (response != null && response.TimeSeriesFXDaily != null)
        {
            forexData = response.TimeSeriesFXDaily.Values.ToList();
            lastRefreshDate = DateTime.Now;
        }
    }
    @* Function to capture the from symbol selected by user *@
    private async Task HandleFromSelectionChange(ChangeEventArgs e)
    {
        fromSymbol = e.Value.ToString();
        await FetchForexData();
    }
    @* Function to capture the to symbol selected by user *@
    private async Task HandleToSelectionChange(ChangeEventArgs e)
    {
        toSymbol = e.Value.ToString();
        await FetchForexData();
    }
    @* Function to refresh data *@
    private async Task RefreshData()
    {
        await FetchForexData();
    }
    @* Class declaration *@
    public class ForexResponse
    {
        [System.Text.Json.Serialization.JsonPropertyName("Time Series FX (Daily)")]
        public Dictionary<string, ForexData> TimeSeriesFXDaily { get; set; }
    }

    public class ForexData
    {
        [System.Text.Json.Serialization.JsonPropertyName("1. open")]
        public string Open { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("2. high")]
        public string High { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("3. low")]
        public string Low { get; set; }
        [System.Text.Json.Serialization.JsonPropertyName("4. close")]
        public string Close { get; set; }
    }
}
